import{b as f,g as d,f as h}from"./index.be80c40b.js";function g(e){for(var t in e){var a=e[t].trim(),o,r;if(!a)a=null;else if(a==="true")a=!0;else if(a==="false")a=!1;else if(a==="NaN")a=NaN;else if(!isNaN(o=+a))a=o;else if(r=a.match(/^([-+]\d{2})?\d{4}(-\d{2}(-\d{2})?)?(T\d{2}:\d{2}(:\d{2}(\.\d{3})?)?(Z|[-+]\d{2}:\d{2})?)?$/))E&&r[4]&&!r[7]&&(a=a.replace(/-/g,"/").replace(/T/," ")),a=new Date(a);else continue;e[t]=a}return e}const E=new Date("2019-01-01T00:00").getHours()||new Date("2019-07-01T00:00").getHours(),x="https://www.ons.gov.uk/visualisations/areas",b="https://ons-dp-prod-cdn.s3.eu-west-2.amazonaws.com/maptiles/ap-geos/v2",k={W04:{label:"community",plural:"communities",childGroup:!0},E06:{label:"unitary authority",plural:"unitary authorities"},W06:{label:"unitary authority",plural:"unitary authorities",childGroup:!0},E07:{label:"non-metropolitan district",plural:"non-metropolitan districts",childGroup:!0},E08:{label:"metropolitan district",plural:"metropolitan districts"},E09:{label:"borough",plural:"boroughs",childGroup:!0},E10:{label:"county",plural:"counties"},E11:{label:"metropolitan county",plural:"metropolital counties"},S12:{label:"council area",plural:"council areas",childGroup:!0},N09:{label:"local government district",plural:"local government districts",childGroup:!0}},z=["E00","W00","E01","W01","E02","W02","E04","W04","E05","W05"],N=["E06","E07","E08","E09","E10","E12","E47","E92","N09","N92","S12","S92","W06","W92"],v=[{id:"uk",type:"geojson"},{id:"ctry",type:"geojson"},{id:"rgn",type:"geojson"},{id:"la",type:"vector",url:"https://cdn.ons.gov.uk/maptiles/administrative/2023/authorities-all/v1/boundaries/{z}/{x}/{y}.pbf",layer:"boundaries",minzoom:4},{id:"wpc",type:"vector",url:"https://cdn.ons.gov.uk/maptiles/administrative/2010/wpc/v2/boundaries/{z}/{x}/{y}.pbf",layer:"boundaries",minzoom:4},{id:"sener",type:"vector",url:"https://cdn.ons.gov.uk/maptiles/administrative/2022/sen/v1/boundaries/{z}/{x}/{y}.pbf",layer:"region"},{id:"senc",type:"vector",url:"https://cdn.ons.gov.uk/maptiles/administrative/2022/sen/v1/boundaries/{z}/{x}/{y}.pbf",layer:"constituency"},{id:"wd",type:"vector",url:"https://cdn.ons.gov.uk/maptiles/administrative/2023/wd/v1/boundaries/{z}/{x}/{y}.pbf",layer:"boundaries",minzoom:6},{id:"par",type:"vector",url:"https://cdn.ons.gov.uk/maptiles/administrative/2022/par/v1/boundaries/{z}/{x}/{y}.pbf",layer:"par",minzoom:6},{id:"msoa",type:"vector",url:"https://cdn.ons.gov.uk/maptiles/administrative/2021/msoa/v2/boundaries/{z}/{x}/{y}.pbf",layer:"msoa",minzoom:6},{id:"lsoa",type:"vector",url:"https://cdn.ons.gov.uk/maptiles/administrative/2021/lsoa/v2/boundaries/{z}/{x}/{y}.pbf",layer:"lsoa",minzoom:7},{id:"oa",type:"vector",url:"https://cdn.ons.gov.uk/maptiles/administrative/2021/oa/v2/boundaries/{z}/{x}/{y}.pbf",layer:"oa",minzoom:8}],c=e=>e.map(t=>["!",["in",t,["get","areacd"]]]),n=[{key:"uk",codes:["K02"],source:"uk"},{key:"ctry",codes:["E92","S92","N92","W92"],pcio:"country",label:"country",plural:"countries",source:"ctry"},{key:"rgn",codes:["E12"],pcio:"region",label:"region",plural:"regions",source:"rgn"},{key:"cauth",codes:["E06","E09","E10","E47","N09","S12","W06"],label:"upper-tier/combined authority",plural:"upper-tier/combined authorities",source:"la",filter:["all",...c(["E07","E08"]),["!",["==",["get","cauth"],"true"]]]},{key:"utla",codes:["E06","E08","E09","E10","N09","S12","W06"],pcio:"admin_county",label:"upper-tier/unitary authority",plural:"upper-tier/unitary authorities",source:"la",filter:["all",...c(["E07","E47"])]},{key:"ltla",codes:["E06","E07","E08","E09","N09","S12","W06"],pcio:"admin_district",label:"lower-tier/unitary authority",plural:"lower-tier/unitary authorities",source:"la",filter:["all",...c(["E10","E47"])]},{key:"wpc",codes:["E14","N06","S14","W07"],pcio:"parliamentary_constituency",label:"parliamentary constituency",plural:"parliamentary constituencies",source:"wpc"},{key:"sener",codes:["W10"],label:"Senedd electoral region",plural:"Senedd electoral regions",source:"sener"},{key:"senc",codes:["W09"],label:"Senedd constituency",plural:"Senedd constituencies",source:"senc"},{key:"wd",codes:["E05","W05"],pcio:"admin_ward",label:"ward",plural:"wards",source:"wd"},{key:"par",codes:["E04","W04"],pcio:"parish",label:"parish",plural:"parishes",source:"par"},{key:"msoa",codes:["E02","W02"],pcio:"msoa",label:"MSOA",plural:"MSOAs",source:"msoa"},{key:"lsoa",codes:["E01","W01"],pcio:"lsoa",label:"LSOA",plural:"LSOAs",source:"lsoa"},{key:"oa",codes:["E00","W00"],label:"output area",plural:"output areas",source:"oa"}],T=v.map(e=>({...e,layers:n.filter(t=>t.source===e.id)})),l=(()=>{let e={};return n.forEach(t=>t.codes.forEach(a=>{e[a]={...t};const o=k[a];o!=null&&o.childGroup&&(e[a].label=o.label,e[a].plural=o.plural)})),e})();(()=>{let e={};return n.forEach(t=>e[t.key]=t),e})();const w=(e,t=g)=>f(e.replace(/\uFEFF/,""),t);async function G(e,t=window.fetch){let o=await(await t(e)).text(),r=w(o),s=r.columns.filter(i=>{r[0][i]&&String(r[0][i]).includes("|")});return r.forEach((i,u)=>{s.forEach(p=>{i[p]=i[p].split("|")})}),r}function W(e){let t=Array.from(new Set(e.sort((r,s)=>r.localeCompare(s)).map(r=>l[r]))).filter((r,s,i)=>i.map(u=>u.key).indexOf(r.key)===s);const a=["cauth","utla","ltla"].filter(r=>t.map(s=>s.key).includes(r));a.length>1&&(t=t.filter(r=>!a.slice(1).includes(r.key)));const o=n.map(r=>r.key);return t.sort((r,s)=>o.indexOf(r.key)-o.indexOf(s.key))}async function O(e,t=window.fetch){if(!e.match(/[EKNSW]\d{8}\b/))return{place:null,type:null,geometry:null};try{let a=e.slice(0,3),r=await(await t(`${b}/${a}/${e}.json`)).json();return r.properties.childTypes=W(r.properties.child_typecds),{place:r.properties,type:l[a],geometry:r.geometry}}catch(a){return console.debug(a),{place:null,type:null,geometry:null}}}const m=(e,t)=>!t||(!e.start||t>e.start)&&(!e.end||t<=e.end);function y(e,t,a=null){var r;const o=[...e.parents];["E","W"].includes(e.areacd[0])&&o.push({areacd:"K04000001",areanm:"England and Wales"});for(const s of o){let i=s.areacd.slice(0,3);if(t.includes(i)&&m(s,a))return s.groupcd=(r=l[i])!=null&&r.key?l[i].key:"ew",s}return null}function $(e,t){let a=[],o=[];return e.forEach(r=>{let s=y(t,r.geocodes,r.year);r.geocodes.includes(t.typecd)&&m(t,r.year)?a.push({...r,place:t}):s&&o.push({...r,place:y(t,r.geocodes,r.year)})}),[...a,...o]}function A(e,t){const a=s=>{const i=t[s];return s==="groupcd"&&i==="ltla"?"lad":i};let o=e,r=e.match(new RegExp(/\{(.*?)\}/g));return Array.isArray(r)&&r.forEach(s=>{if(s.includes("name")){let i=s.slice(1,-1).split(",")[1];o=o.replace(s,`${d(t,i,"prefix")} <strong>${d(t)}</strong>`)}else o=o.replace(s,a(s.slice(1,-1)))}),o}function C(e){return`areas/${e}/`}function j(e,t){const a=t.key==="msoa"?"hclnm":t.key==="oa"?"areacd":"areanm";return e.children.filter(o=>t.codes.includes(o.areacd.slice(0,3))).sort((o,r)=>o[a].localeCompare(r[a]))}function K(e,t){return h(e,t)}function P(e){return e[0].toUpperCase()+e.slice(1)}export{O as a,x as b,l as c,y as d,N as e,$ as f,G as g,T as h,K as i,j,n as k,k as l,C as m,z as n,P as o,A as p};
